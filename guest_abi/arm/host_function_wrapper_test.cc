/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "berberis/runtime/berberis.h"
#include "gtest/gtest.h"

#include "berberis/base/bit_util.h"
#include "berberis/guest_abi/function_wrappers.h"
#include "berberis/guest_abi/guest_abi.h"
#include "berberis/guest_abi/guest_type.h"
#include "berberis/guest_state/guest_addr.h"
#include "berberis/guest_state/guest_state_opaque.h"
#include "berberis/runtime_primitives/host_code.h"
#include "berberis/runtime_primitives/host_function_wrapper_impl.h"
#include "berberis/test_utils/guest_exec_region.h"
#include "berberis/test_utils/translation_test.h"

namespace berberis {

namespace {

class HostFunctionWrapperTest : public TranslationTest {
 protected:
  // Note: we are using both Guest Function wrapper and Host Function Wrapper here.
  //
  // We don't call wrapped function via GuestCall â€” this would ensure that they match but this could
  // easily happen while they both would violate AAPCS.
  //
  // Instead we use simple functions (usually with just an address of host-wrapped function as a
  // sole argument) and use compiler-generated code which verifies our wrappers support code
  // generated by compiler.
  //
  // This is also important because certain facilities are not supported by GuestCall currently
  // (e.g. large structures like with mallinfo(3) or AAPCS-VFP like certain Vulkan functions).
  template <typename GuestResultType,
            GuestAbi::CallingConventionsVariant kCallingConventionsVariant = GuestAbi::kDefaultAbi,
            typename Func,
            typename... AdditionalParams>
  GuestResultType CallWrappedHostFunctionFromWrappedGuestFunction(GuestAddr guest_function,
                                                                  Func host_function,
                                                                  AdditionalParams... params) {
    WrapHostFunction<kCallingConventionsVariant>(host_function, "HostFunction");

    auto caller = WrapGuestFunction(
        bit_cast<GuestType<GuestResultType (*)(Func, AdditionalParams...)>>(guest_function),
        "GuestFunction");

    return caller(host_function, params...);
  }
};

void do_not_wrap_me() {}

void wrap_me() {}

void trampoline(HostCode, ProcessState*) {}

TEST_F(HostFunctionWrapperTest, Unwrap) {
  InitBerberis();

  EXPECT_TRUE(nullptr == UnwrapHostFunction(0));

  EXPECT_TRUE(nullptr == UnwrapHostFunction(ToGuestAddr(do_not_wrap_me)));

  WrapHostFunctionImpl(
      const_cast<HostCode>(reinterpret_cast<void*>(wrap_me)), trampoline, "wrap_me");
  EXPECT_TRUE(wrap_me == UnwrapHostFunction(ToGuestAddr(wrap_me)));
}

int sub(int x, int y) {
  return x - y;
}

TEST_F(HostFunctionWrapperTest, WrapTwoInt) {
  // int caller(int(*ptr)(int, int)) {
  //   return ptr(5, 7);
  // }
  GuestAddr pc = MakeGuestExecRegion<uint32_t>({
      0xe1a03000,  // mov r3, r0
      0xe3a01007,  // mov r1, #7
      0xe3a00005,  // mov r0, #5
      0xe12fff13,  // bx  r3
  });

  EXPECT_EQ(-2, CallWrappedHostFunctionFromWrappedGuestFunction<int>(pc, sub));
}

float fsub(float x, float y) {
  return x - y;
}

TEST_F(HostFunctionWrapperTest, WrapTwoFloat) {
  // float foo(float (*ptr)(float, float)) {
  //    return ptr(5.0, 7.0);
  // }
  GuestAddr pc = MakeGuestExecRegion<uint32_t>({
      0xe3001000,  // movw r1, #0
      0xe1a02000,  // mov  r2, r0
      0xe3000000,  // movw r0, #0
      0xe34410e0,  // movt r1, #16608 ; 0x40e0
      0xe34400a0,  // movt r0, #16544 ; 0x40a0
      0xe12fff12,  // bx   r2
  });

  EXPECT_EQ(-2.0, CallWrappedHostFunctionFromWrappedGuestFunction<float>(pc, fsub));
}

float fsub_vfp(float x, float y) {
  return x - y;
}

TEST_F(HostFunctionWrapperTest, WrapTwoFloatVFP) {
  // float foo(__attribute__((pcs("aapcs-vfp"))) float (*ptr)(float, float)) {
  //    return ptr(5.0, 7.0);
  // }
  GuestAddr pc = MakeGuestExecRegion<uint32_t>({
      0xe92d4800,  // push     {fp, lr}
      0xe1a0b00d,  // mov      fp, sp
      0xeeb10a04,  // vmov.f32 s0, #20 ; 5.0
      0xeef10a0c,  // vmov.f32 s1, #28 ; 7.0
      0xe12fff30,  // blx      r0
      0xee100a10,  // vmov     r0, s0
      0xe8bd8800,  // pop      {fp, pc}
  });

  EXPECT_EQ(
      -2.0,
      (CallWrappedHostFunctionFromWrappedGuestFunction<float, GuestAbi::kAapcsVfp>(pc, fsub_vfp)));
}

int add(int x, int y) {
  return x + y;
}

int (*(add_sub_chooser)(int n))(int, int) {
  if (n == 1) return add;
  if (n == 2) return sub;
  return nullptr;
}

TEST_F(HostFunctionWrapperTest, WrapReturnedFunction) {
  // int caller(int (*(*ptr)(int))(int, int), int n) {
  //   return ptr(n)(5, 7);
  // }
  GuestAddr pc = MakeGuestExecRegion<uint32_t>({
      0xe1a03000,  // mov  r3, r0
      0xe92d4010,  // push {r4, lr}
      0xe1a00001,  // mov  r0, r1
      0xe1a0e00f,  // mov  lr, pc
      0xe12fff13,  // bx   r3
      0xe3a01007,  // mov  r1, #7
      0xe1a03000,  // mov  r3, r0
      0xe8bd4010,  // pop  {r4, lr}
      0xe3a00005,  // mov  r0, #5
      0xe12fff13,  // bx   r3
  });

  EXPECT_EQ(12, CallWrappedHostFunctionFromWrappedGuestFunction<int>(pc, add_sub_chooser, 1));
  EXPECT_EQ(-2, CallWrappedHostFunctionFromWrappedGuestFunction<int>(pc, add_sub_chooser, 2));
  EXPECT_DEATH(CallWrappedHostFunctionFromWrappedGuestFunction<int>(pc, add_sub_chooser, 0), "");
}  // namespace

}  // namespace

}  // namespace berberis
