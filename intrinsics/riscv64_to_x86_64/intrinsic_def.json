{
  "License": [
    "Copyright (C) 2023 The Android Open Source Project",
    "",
    "Licensed under the Apache License, Version 2.0 (the “License”);",
    "you may not use this file except in compliance with the License.",
    "You may obtain a copy of the License at",
    "",
    "     http://www.apache.org/licenses/LICENSE-2.0",
    "",
    "Unless required by applicable law or agreed to in writing, software",
    "distributed under the License is distributed on an “AS IS” BASIS,",
    "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
    "See the License for the specific language governing permissions and",
    "limitations under the License."
  ],
  "AmoAdd": {
    "comment": "Atomic add, like __atomic_fetch_add. Three template arguments: type, aq, rl.",
    "class": "template",
    "variants": [
      "int32_t, false, false",
      "int32_t, false, true",
      "int32_t, true, false",
      "int32_t, true, true",
      "int64_t, false, false",
      "int64_t, false, true",
      "int64_t, true, false",
      "int64_t, true, true"
    ],
    "in": [ "int64_t", "Type0" ],
    "out": [ "Type0" ],
    "side_effects_comment": "Atomic instruction. Should be volatile.",
    "has_side_effects": true
  },
  "AmoAnd": {
    "comment": "Atomic and, like __atomic_fetch_and. Three template arguments: type, aq, rl.",
    "class": "template",
    "variants": [
      "int32_t, false, false",
      "int32_t, false, true",
      "int32_t, true, false",
      "int32_t, true, true",
      "int64_t, false, false",
      "int64_t, false, true",
      "int64_t, true, false",
      "int64_t, true, true"
    ],
    "in": [ "int64_t", "Type0" ],
    "out": [ "Type0" ],
    "side_effects_comment": "Atomic instruction. Should be volatile.",
    "has_side_effects": true
  },
  "AmoMax": {
    "comment": "Atomic maximum, like __atomic_fetch_max. Three template arguments: type, aq, rl.",
    "class": "template",
    "variants": [
      "int32_t, false, false",
      "int32_t, false, true",
      "int32_t, true, false",
      "int32_t, true, true",
      "int64_t, false, false",
      "int64_t, false, true",
      "int64_t, true, false",
      "int64_t, true, true",
      "uint32_t, false, false",
      "uint32_t, false, true",
      "uint32_t, true, false",
      "uint32_t, true, true",
      "uint64_t, false, false",
      "uint64_t, false, true",
      "uint64_t, true, false",
      "uint64_t, true, true"
    ],
    "in": [ "int64_t", "Type0" ],
    "out": [ "Type0" ],
    "side_effects_comment": "Atomic instruction. Should be volatile.",
    "has_side_effects": true
  },
  "AmoMin": {
    "comment": "Atomic minimum, like __atomic_fetch_min. Three template arguments: type, aq, rl.",
    "class": "template",
    "variants": [
      "int32_t, false, false",
      "int32_t, false, true",
      "int32_t, true, false",
      "int32_t, true, true",
      "int64_t, false, false",
      "int64_t, false, true",
      "int64_t, true, false",
      "int64_t, true, true",
      "uint32_t, false, false",
      "uint32_t, false, true",
      "uint32_t, true, false",
      "uint32_t, true, true",
      "uint64_t, false, false",
      "uint64_t, false, true",
      "uint64_t, true, false",
      "uint64_t, true, true"
    ],
    "in": [ "int64_t", "Type0" ],
    "out": [ "Type0" ],
    "side_effects_comment": "Atomic instruction. Should be volatile.",
    "has_side_effects": true
  },
  "AmoOr": {
    "comment": "Atomic or, like __atomic_fetch_or. Three template arguments: type, aq, rl.",
    "class": "template",
    "variants": [
      "int32_t, false, false",
      "int32_t, false, true",
      "int32_t, true, false",
      "int32_t, true, true",
      "int64_t, false, false",
      "int64_t, false, true",
      "int64_t, true, false",
      "int64_t, true, true"
    ],
    "in": [ "int64_t", "Type0" ],
    "out": [ "Type0" ],
    "side_effects_comment": "Atomic instruction. Should be volatile.",
    "has_side_effects": true
  },
  "AmoSwap": {
    "comment": "Atomic exchange, like __atomic_exchange_n. Three template arguments: type, aq, rl.",
    "class": "template",
    "variants": [
      "int32_t, false, false",
      "int32_t, false, true",
      "int32_t, true, false",
      "int32_t, true, true",
      "int64_t, false, false",
      "int64_t, false, true",
      "int64_t, true, false",
      "int64_t, true, true"
    ],
    "in": [ "int64_t", "Type0" ],
    "out": [ "Type0" ],
    "side_effects_comment": "Atomic instruction. Should be volatile.",
    "has_side_effects": true
  },
  "AmoXor": {
    "comment": "Atomic exclusive or, like __atomic_fetch_xor. Three template arguments: type, aq, rl.",
    "class": "template",
    "variants": [
      "int32_t, false, false",
      "int32_t, false, true",
      "int32_t, true, false",
      "int32_t, true, true",
      "int64_t, false, false",
      "int64_t, false, true",
      "int64_t, true, false",
      "int64_t, true, true"
    ],
    "in": [ "int64_t", "Type0" ],
    "out": [ "Type0" ],
    "side_effects_comment": "Atomic instruction. Should be volatile.",
    "has_side_effects": true
  },
  "CanonicalizeNan": {
    "comment": "Unbox small floating-point value from NaN",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "Type0" ],
    "out": [ "Type0" ]
  },
  "Clz": {
    "comment": "Count leading zeros. Note: works like lzcnt, supports zero input!",
    "class": "template",
    "variants": [ "int32_t", "int64_t" ],
    "in": [ "Type0" ],
    "out": [ "int64_t" ]
  },
  "Ctz": {
    "comment": "Count trailing zeros. Note: works like tzcnt, supports zero input!",
    "class": "template",
    "variants": [ "int32_t", "int64_t" ],
    "in": [ "Type0" ],
    "out": [ "int64_t" ]
  },
  "Cpop": {
    "comment": "Count set bits",
    "class": "template",
    "variants": [ "int32_t", "int64_t" ],
    "in": [ "Type0" ],
    "out": [ "int64_t" ]
  },
  "FAdd": {
    "comment": "Floating point addition",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "imm8", "int8_t", "Type0", "Type0" ],
    "out": [ "Type0" ]
  },
  "FAddHostRounding": {
    "comment": "Fused multiply-addition (uses host dynamic rounding)",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "Type0", "Type0" ],
    "out": [ "Type0" ]
  },
  "FClass": {
    "comment": "Classify float number in 10 classes as defined by RISC-V",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "Type0" ],
    "out": [ "uint64_t" ],
    "side_effects_comment": "Classification of value, doesn't set exceptions bits.",
    "has_side_effects": false
  },
  "FCvtFloatToFloat": {
    "comment": "Convert float to float",
    "class": "template",
    "variants": [ "Float32, Float64", "Float64, Float32" ],
    "in": [ "imm8", "int8_t", "Type1" ],
    "out": [ "Type0" ],
    "side_effects_comment": "Conversion of value, doesn't set exceptions bits.",
    "has_side_effects": false
  },
  "FCvtFloatToInteger": {
    "comment": "Convert float to integer",
    "class": "template",
    "variants": [
      "int32_t, Float32",
      "int32_t, Float64",
      "int64_t, Float32",
      "int64_t, Float64",
      "uint32_t, Float32",
      "uint32_t, Float64",
      "uint64_t, Float32",
      "uint64_t, Float64"
    ],
    "in": [ "imm8", "int8_t", "Type1" ],
    "out": [ "Type0" ],
    "side_effects_comment": "Conversion of value, doesn't set exceptions bits.",
    "has_side_effects": false
  },
  "FCvtIntegerToFloat": {
    "comment": "Convert integer to float",
    "class": "template",
    "variants": [
      "Float32, int32_t",
      "Float32, int64_t",
      "Float32, uint32_t",
      "Float32, uint64_t",
      "Float64, int32_t",
      "Float64, int64_t",
      "Float64, uint32_t",
      "Float64, uint64_t"
    ],
    "in": [ "imm8", "int8_t", "Type1" ],
    "out": [ "Type0" ],
    "side_effects_comment": "Conversion of value, doesn't set exceptions bits.",
    "has_side_effects": false
  },
  "FCvtFloatToIntegerHostRounding": {
    "comment": "Convert float to integer",
    "class": "template",
    "variants": [
      "int32_t, Float32",
      "int32_t, Float64",
      "int64_t, Float32",
      "int64_t, Float64"
    ],
    "in": [ "Type1" ],
    "out": [ "Type0" ],
    "side_effects_comment": "Conversion of value, doesn't set exceptions bits.",
    "has_side_effects": false
  },
  "FDiv": {
    "comment": "Floating point division",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "imm8", "int8_t", "Type0", "Type0" ],
    "out": [ "Type0" ]
  },
  "FDivHostRounding": {
    "comment": "Floating point division (uses host dynamic rounding)",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "Type0", "Type0" ],
    "out": [ "Type0" ]
  },
  "Feq": {
    "comment": "Floating point comparison for “equal” (quiet comparison)",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "Type0", "Type0" ],
    "out": [ "int64_t" ]
  },
  "Fle": {
    "comment": "Floating point comparison for “less of equal” (signaling comparison)",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "Type0", "Type0" ],
    "out": [ "int64_t" ]
  },
  "Flt": {
    "comment": "Floating point comparison for “less” (quiet comparison)",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "Type0", "Type0" ],
    "out": [ "int64_t" ]
  },
  "FMAdd": {
    "comment": "Fused multiply-addition",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "imm8", "int8_t", "Type0", "Type0", "Type0" ],
    "out": [ "Type0" ]
  },
  "FMAddHostRounding": {
    "comment": "Fused multiply-addition (uses host dynamic rounding)",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "Type0", "Type0", "Type0" ],
    "out": [ "Type0" ]
  },
  "FMSub": {
    "comment": "Fused multiply-subtraction",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "imm8", "int8_t", "Type0", "Type0", "Type0" ],
    "out": [ "Type0" ]
  },
  "FMSubHostRounding": {
    "comment": "Fused multiply-subtraction (uses host dynamic rounding)",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "Type0", "Type0", "Type0" ],
    "out": [ "Type0" ]
  },
  "FMax": {
    "comment": "Maximum from two floats",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "Type0", "Type0" ],
    "out": [ "Type0" ]
  },
  "FMin": {
    "comment": "Minimum from two floats",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "Type0", "Type0" ],
    "out": [ "Type0" ]
  },
  "FMul": {
    "comment": "Floating point multiplication",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "imm8", "int8_t", "Type0", "Type0" ],
    "out": [ "Type0" ]
  },
  "FMulHostRounding": {
    "comment": "Floating point multiplication (uses host dynamic rounding)",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "Type0", "Type0" ],
    "out": [ "Type0" ]
  },
  "FmvFloatToInteger": {
    "comment": "Move floating point register to integer register",
    "class": "template",
    "variants": [ "int32_t, Float32", "int64_t, Float64" ],
    "in": [ "Type1" ],
    "out": [ "Type0" ],
    "side_effects_comment": "Conversion of value, doesn't set exceptions bits.",
    "has_side_effects": false
  },
  "FmvIntegerToFloat": {
    "comment": "Move floating point register to integer register",
    "class": "template",
    "variants": [ "Float32, int32_t", "Float64, int64_t" ],
    "in": [ "Type1" ],
    "out": [ "Type0" ],
    "side_effects_comment": "Conversion of value, doesn't set exceptions bits.",
    "has_side_effects": false
  },
  "FNMAdd": {
    "comment": "Fused negated multiply-addition",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "imm8", "int8_t", "Type0", "Type0", "Type0" ],
    "out": [ "Type0" ]
  },
  "FNMAddHostRounding": {
    "comment": "Fused negated multiply-addition (uses host dynamic rounding)",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "Type0", "Type0", "Type0" ],
    "out": [ "Type0" ]
  },
  "FNMSub": {
    "comment": "Fused negated multiply-subtraction",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "imm8", "int8_t", "Type0", "Type0", "Type0" ],
    "out": [ "Type0" ]
  },
  "FNMSubHostRounding": {
    "comment": "Fused negated multiply-subtraction (uses host dynamic rounding)",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "Type0", "Type0", "Type0" ],
    "out": [ "Type0" ]
  },
  "FSgnj": {
    "comment": "Copy sign of one float to another",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "Type0", "Type0" ],
    "out": [ "Type0" ],
    "side_effects_comment": "Special conversion. Doesn't set exceptions bits.",
    "has_side_effects": false
  },
  "FSgnjn": {
    "comment": "Copy negated sign of one float to another",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "Type0", "Type0" ],
    "out": [ "Type0" ],
    "side_effects_comment": "Special conversion. Doesn't set exceptions bits.",
    "has_side_effects": false
  },
  "FSgnjx": {
    "comment": "Xor two sign bits of two floats and return",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "Type0", "Type0" ],
    "out": [ "Type0" ],
    "side_effects_comment": "Special conversion. Doesn't set exceptions bits.",
    "has_side_effects": false
  },
  "FSqrt": {
    "comment": "Square root",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "imm8", "int8_t", "Type0" ],
    "out": [ "Type0" ]
  },
  "FSqrtHostRounding": {
    "comment": "Square root (uses host dynamic rounding)",
    "class": "template",
    "variants": [ "Float32" ],
    "in": [ "Type0" ],
    "out": [ "Type0" ]
  },
  "FSub": {
    "comment": "Floating point subtraction",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "imm8", "int8_t", "Type0", "Type0" ],
    "out": [ "Type0" ]
  },
  "FSubHostRounding": {
    "comment": "Floating point subtraction (uses host dynamic rounding)",
    "class": "template",
    "variants": [ "Float32", "Float64" ],
    "in": [ "Type0", "Type0" ],
    "out": [ "Type0" ]
  },
  "Lr": {
    "comment": "Atomic load+reserve (see RISC-V manual). Three template arguments: type, aq, rl.",
    "class": "template",
    "variants": [
      "int32_t, false, false",
      "int32_t, false, true",
      "int32_t, true, false",
      "int32_t, true, true",
      "int64_t, false, false",
      "int64_t, false, true",
      "int64_t, true, false",
      "int64_t, true, true"
    ],
    "in": [ "int64_t" ],
    "out": [ "Type0" ],
    "side_effects_comment": "Atomic instruction. Should be volatile.",
    "has_side_effects": true
  },
  "NanBox": {
    "comment": [
      "NaN-box small floating-point value into NaN.",
      "Note: we pass input value as Float64 but top half may contain garbage.",
      "This is needed because otherwise FPRegToFloat would be used to check it."
    ],
    "class": "template",
    "variants": [ "Float32" ],
    "in": [ "Float64" ],
    "out": [ "Float64" ]
  },
  "Sc": {
    "comment": "Store conditional (see RISC-V manual). Three template arguments: type, aq, rl.",
    "class": "template",
    "variants": [
      "int32_t, false, false",
      "int32_t, false, true",
      "int32_t, true, false",
      "int32_t, true, true",
      "int64_t, false, false",
      "int64_t, false, true",
      "int64_t, true, false",
      "int64_t, true, true"
    ],
    "in": [ "int64_t", "Type0" ],
    "out": [ "int64_t" ],
    "side_effects_comment": "Atomic instruction. Should be volatile.",
    "has_side_effects": true
  },
  "UnboxNan": {
    "comment": "Unbox small floating-point value from NaN",
    "class": "template",
    "variants": [ "Float32" ],
    "in": [ "Float64" ],
    "out": [ "Type0" ]
  }
}
