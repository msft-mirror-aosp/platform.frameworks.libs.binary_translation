// This file automatically generated by gen_kernel_syscalls_translation.py
// DO NOT EDIT!

long RunGuestSyscallImpl(long guest_nr,
                         long arg_1,
                         long arg_2,
                         long arg_3,
                         long arg_4,
                         long arg_5,
                         long arg_6) {
  switch (guest_nr) {
    case 202:  // __NR_accept
      return syscall(43, arg_1, arg_2, arg_3);
    case 242:  // __NR_accept4
      return syscall(288, arg_1, arg_2, arg_3, arg_4);
    case 89:  // __NR_acct
      return syscall(163, arg_1);
    case 217:  // __NR_add_key
      return syscall(248, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 171:  // __NR_adjtimex
      return syscall(159, arg_1);
    case 200:  // __NR_bind
      return syscall(49, arg_1, arg_2, arg_3);
    case 280:  // __NR_bpf
      return syscall(321, arg_1, arg_2, arg_3);
    case 214:  // __NR_brk
      return syscall(12, arg_1);
    case 90:  // __NR_capget
      return syscall(125, arg_1, arg_2);
    case 91:  // __NR_capset
      return syscall(126, arg_1, arg_2);
    case 49:  // __NR_chdir
      return syscall(80, arg_1);
    case 51:  // __NR_chroot
      return syscall(161, arg_1);
    case 266:  // __NR_clock_adjtime
      return syscall(305, arg_1, arg_2);
    case 114:  // __NR_clock_getres
      return syscall(229, arg_1, arg_2);
    case 113:  // __NR_clock_gettime
      return syscall(228, arg_1, arg_2);
    case 115:  // __NR_clock_nanosleep
      return syscall(230, arg_1, arg_2, arg_3, arg_4);
    case 112:  // __NR_clock_settime
      return syscall(227, arg_1, arg_2);
    case 220:  // __NR_clone
      // custom syscall
      return RunGuestSyscall___NR_clone(arg_1, arg_2, arg_3, arg_4, arg_5);
    case 435:  // __NR_clone3
      // custom syscall
      return RunGuestSyscall___NR_clone3(arg_1, arg_2);
    case 57:  // __NR_close
      return syscall(3, arg_1);
    case 436:  // __NR_close_range
      return syscall(436, arg_1, arg_2, arg_3);
    case 203:  // __NR_connect
      return syscall(42, arg_1, arg_2, arg_3);
    case 285:  // __NR_copy_file_range
      return syscall(326, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6);
    case 106:  // __NR_delete_module
      return syscall(176, arg_1, arg_2);
    case 23:  // __NR_dup
      return syscall(32, arg_1);
    case 24:  // __NR_dup3
      return syscall(292, arg_1, arg_2, arg_3);
    case 20:  // __NR_epoll_create1
      return syscall(291, arg_1);
    case 21:  // __NR_epoll_ctl
      // incompatible prototype
      return RunGuestSyscall___NR_epoll_ctl(arg_1, arg_2, arg_3, arg_4);
    case 22:  // __NR_epoll_pwait
      // incompatible prototype
      return RunGuestSyscall___NR_epoll_pwait(arg_1, arg_2, arg_3, arg_4, arg_5, arg_6);
    case 441:  // __NR_epoll_pwait2
      // incompatible prototype
      return RunGuestSyscall___NR_epoll_pwait2(arg_1, arg_2, arg_3, arg_4, arg_5, arg_6);
    case 19:  // __NR_eventfd2
      return syscall(290, arg_1, arg_2);
    case 221:  // __NR_execve
      // custom syscall
      return RunGuestSyscall___NR_execve(arg_1, arg_2, arg_3);
    case 281:  // __NR_execveat
      // custom syscall
      return RunGuestSyscall___NR_execveat(arg_1, arg_2, arg_3, arg_4, arg_5);
    case 93:  // __NR_exit
      // cleans guest thread
      return RunGuestSyscall___NR_exit(arg_1);
    case 94:  // __NR_exit_group
      return syscall(231, arg_1);
    case 48:  // __NR_faccessat
      // follows symlinks
      return RunGuestSyscall___NR_faccessat(arg_1, arg_2, arg_3);
    case 439:  // __NR_faccessat2
      return syscall(439, arg_1, arg_2, arg_3, arg_4);
    case 223:  // __NR_fadvise64
      // sys_fadvise64_64 on riscv64 but sys_fadvise64 on x86_64
      return RunGuestSyscall___NR_fadvise64(arg_1, arg_2, arg_3, arg_4);
    case 47:  // __NR_fallocate
      return syscall(285, arg_1, arg_2, arg_3, arg_4);
    case 262:  // __NR_fanotify_init
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_fanotify_init");
      errno = ENOSYS;
      return -1;
    case 263:  // __NR_fanotify_mark
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_fanotify_mark");
      errno = ENOSYS;
      return -1;
    case 50:  // __NR_fchdir
      return syscall(81, arg_1);
    case 52:  // __NR_fchmod
      return syscall(91, arg_1, arg_2);
    case 53:  // __NR_fchmodat
      return syscall(268, arg_1, arg_2, arg_3);
    case 55:  // __NR_fchown
      return syscall(93, arg_1, arg_2, arg_3);
    case 54:  // __NR_fchownat
      return syscall(260, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 25:  // __NR_fcntl
      // custom syscall
      return RunGuestSyscall___NR_fcntl(arg_1, arg_2, arg_3);
    case 83:  // __NR_fdatasync
      return syscall(75, arg_1);
    case 10:  // __NR_fgetxattr
      return syscall(193, arg_1, arg_2, arg_3, arg_4);
    case 273:  // __NR_finit_module
      return syscall(313, arg_1, arg_2, arg_3);
    case 13:  // __NR_flistxattr
      return syscall(196, arg_1, arg_2, arg_3);
    case 32:  // __NR_flock
      return syscall(73, arg_1, arg_2);
    case 16:  // __NR_fremovexattr
      return syscall(199, arg_1, arg_2);
    case 431:  // __NR_fsconfig
      return syscall(431, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 7:  // __NR_fsetxattr
      return syscall(190, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 432:  // __NR_fsmount
      return syscall(432, arg_1, arg_2, arg_3);
    case 430:  // __NR_fsopen
      return syscall(430, arg_1, arg_2);
    case 433:  // __NR_fspick
      return syscall(433, arg_1, arg_2, arg_3);
    case 80:  // __NR_fstat
      // incompatible prototype
      return RunGuestSyscall___NR_fstat(arg_1, arg_2);
    case 44:  // __NR_fstatfs
      return syscall(138, arg_1, arg_2);
    case 82:  // __NR_fsync
      return syscall(74, arg_1);
    case 46:  // __NR_ftruncate
      return syscall(77, arg_1, arg_2);
    case 98:  // __NR_futex
      return syscall(202, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6);
    case 449:  // __NR_futex_waitv
      return syscall(449, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 236:  // __NR_get_mempolicy
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_get_mempolicy");
      errno = ENOSYS;
      return -1;
    case 100:  // __NR_get_robust_list
      return syscall(274, arg_1, arg_2, arg_3);
    case 168:  // __NR_getcpu
      return syscall(309, arg_1, arg_2, arg_3);
    case 17:  // __NR_getcwd
      return syscall(79, arg_1, arg_2);
    case 61:  // __NR_getdents64
      return syscall(217, arg_1, arg_2, arg_3);
    case 177:  // __NR_getegid
      return syscall(108);
    case 175:  // __NR_geteuid
      return syscall(107);
    case 176:  // __NR_getgid
      return syscall(104);
    case 158:  // __NR_getgroups
      return syscall(115, arg_1, arg_2);
    case 102:  // __NR_getitimer
      return syscall(36, arg_1, arg_2);
    case 205:  // __NR_getpeername
      return syscall(52, arg_1, arg_2, arg_3);
    case 155:  // __NR_getpgid
      return syscall(121, arg_1);
    case 172:  // __NR_getpid
      return syscall(39);
    case 173:  // __NR_getppid
      return syscall(110);
    case 141:  // __NR_getpriority
      return syscall(140, arg_1, arg_2);
    case 278:  // __NR_getrandom
      return syscall(318, arg_1, arg_2, arg_3);
    case 150:  // __NR_getresgid
      return syscall(120, arg_1, arg_2, arg_3);
    case 148:  // __NR_getresuid
      return syscall(118, arg_1, arg_2, arg_3);
    case 163:  // __NR_getrlimit
      return syscall(97, arg_1, arg_2);
    case 165:  // __NR_getrusage
      return syscall(98, arg_1, arg_2);
    case 156:  // __NR_getsid
      return syscall(124, arg_1);
    case 204:  // __NR_getsockname
      return syscall(51, arg_1, arg_2, arg_3);
    case 209:  // __NR_getsockopt
      return syscall(55, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 178:  // __NR_gettid
      return syscall(186);
    case 169:  // __NR_gettimeofday
      return syscall(96, arg_1, arg_2);
    case 174:  // __NR_getuid
      return syscall(102);
    case 8:  // __NR_getxattr
      return syscall(191, arg_1, arg_2, arg_3, arg_4);
    case 105:  // __NR_init_module
      return syscall(175, arg_1, arg_2, arg_3);
    case 27:  // __NR_inotify_add_watch
      return syscall(254, arg_1, arg_2, arg_3);
    case 26:  // __NR_inotify_init1
      return syscall(294, arg_1);
    case 28:  // __NR_inotify_rm_watch
      return syscall(255, arg_1, arg_2);
    case 3:  // __NR_io_cancel
      return syscall(210, arg_1, arg_2, arg_3);
    case 1:  // __NR_io_destroy
      return syscall(207, arg_1);
    case 4:  // __NR_io_getevents
      return syscall(208, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 292:  // __NR_io_pgetevents
      return syscall(333, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6);
    case 0:  // __NR_io_setup
      return syscall(206, arg_1, arg_2);
    case 2:  // __NR_io_submit
      return syscall(209, arg_1, arg_2, arg_3);
    case 426:  // __NR_io_uring_enter
      return syscall(426, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6);
    case 427:  // __NR_io_uring_register
      return syscall(427, arg_1, arg_2, arg_3, arg_4);
    case 425:  // __NR_io_uring_setup
      return syscall(425, arg_1, arg_2);
    case 29:  // __NR_ioctl
      // custom syscall
      return RunGuestSyscall___NR_ioctl(arg_1, arg_2, arg_3);
    case 31:  // __NR_ioprio_get
      return syscall(252, arg_1, arg_2);
    case 30:  // __NR_ioprio_set
      return syscall(251, arg_1, arg_2, arg_3);
    case 272:  // __NR_kcmp
      return syscall(312, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 294:  // __NR_kexec_file_load
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_kexec_file_load");
      errno = ENOSYS;
      return -1;
    case 104:  // __NR_kexec_load
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_kexec_load");
      errno = ENOSYS;
      return -1;
    case 219:  // __NR_keyctl
      return syscall(250, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 129:  // __NR_kill
      return syscall(62, arg_1, arg_2);
    case 445:  // __NR_landlock_add_rule
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_landlock_add_rule");
      errno = ENOSYS;
      return -1;
    case 444:  // __NR_landlock_create_ruleset
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_landlock_create_ruleset");
      errno = ENOSYS;
      return -1;
    case 446:  // __NR_landlock_restrict_self
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_landlock_restrict_self");
      errno = ENOSYS;
      return -1;
    case 9:  // __NR_lgetxattr
      return syscall(192, arg_1, arg_2, arg_3, arg_4);
    case 37:  // __NR_linkat
      return syscall(265, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 201:  // __NR_listen
      return syscall(50, arg_1, arg_2);
    case 11:  // __NR_listxattr
      return syscall(194, arg_1, arg_2, arg_3);
    case 12:  // __NR_llistxattr
      return syscall(195, arg_1, arg_2, arg_3);
    case 18:  // __NR_lookup_dcookie
      return syscall(212, arg_1, arg_2, arg_3);
    case 15:  // __NR_lremovexattr
      return syscall(198, arg_1, arg_2);
    case 62:  // __NR_lseek
      return syscall(8, arg_1, arg_2, arg_3);
    case 6:  // __NR_lsetxattr
      return syscall(189, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 233:  // __NR_madvise
      return syscall(28, arg_1, arg_2, arg_3);
    case 235:  // __NR_mbind
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_mbind");
      errno = ENOSYS;
      return -1;
    case 283:  // __NR_membarrier
      return syscall(324, arg_1, arg_2, arg_3);
    case 279:  // __NR_memfd_create
      return syscall(319, arg_1, arg_2);
    case 447:  // __NR_memfd_secret
      return syscall(447, arg_1);
    case 238:  // __NR_migrate_pages
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_migrate_pages");
      errno = ENOSYS;
      return -1;
    case 232:  // __NR_mincore
      return syscall(27, arg_1, arg_2, arg_3);
    case 34:  // __NR_mkdirat
      return syscall(258, arg_1, arg_2, arg_3);
    case 33:  // __NR_mknodat
      return syscall(259, arg_1, arg_2, arg_3, arg_4);
    case 228:  // __NR_mlock
      return syscall(149, arg_1, arg_2);
    case 284:  // __NR_mlock2
      return syscall(325, arg_1, arg_2, arg_3);
    case 230:  // __NR_mlockall
      return syscall(151, arg_1);
    case 222:  // __NR_mmap
      // changes memory protection
      return RunGuestSyscall___NR_mmap(arg_1, arg_2, arg_3, arg_4, arg_5, arg_6);
    case 40:  // __NR_mount
      return syscall(165, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 442:  // __NR_mount_setattr
      return syscall(442, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 429:  // __NR_move_mount
      return syscall(429, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 239:  // __NR_move_pages
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_move_pages");
      errno = ENOSYS;
      return -1;
    case 226:  // __NR_mprotect
      // changes memory protection
      return RunGuestSyscall___NR_mprotect(arg_1, arg_2, arg_3);
    case 185:  // __NR_mq_getsetattr
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_mq_getsetattr");
      errno = ENOSYS;
      return -1;
    case 184:  // __NR_mq_notify
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_mq_notify");
      errno = ENOSYS;
      return -1;
    case 180:  // __NR_mq_open
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_mq_open");
      errno = ENOSYS;
      return -1;
    case 183:  // __NR_mq_timedreceive
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_mq_timedreceive");
      errno = ENOSYS;
      return -1;
    case 182:  // __NR_mq_timedsend
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_mq_timedsend");
      errno = ENOSYS;
      return -1;
    case 181:  // __NR_mq_unlink
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_mq_unlink");
      errno = ENOSYS;
      return -1;
    case 216:  // __NR_mremap
      // changes memory protection
      return RunGuestSyscall___NR_mremap(arg_1, arg_2, arg_3, arg_4, arg_5);
    case 187:  // __NR_msgctl
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_msgctl");
      errno = ENOSYS;
      return -1;
    case 186:  // __NR_msgget
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_msgget");
      errno = ENOSYS;
      return -1;
    case 188:  // __NR_msgrcv
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_msgrcv");
      errno = ENOSYS;
      return -1;
    case 189:  // __NR_msgsnd
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_msgsnd");
      errno = ENOSYS;
      return -1;
    case 227:  // __NR_msync
      return syscall(26, arg_1, arg_2, arg_3);
    case 229:  // __NR_munlock
      return syscall(150, arg_1, arg_2);
    case 231:  // __NR_munlockall
      return syscall(152);
    case 215:  // __NR_munmap
      // changes memory protection
      return RunGuestSyscall___NR_munmap(arg_1, arg_2);
    case 264:  // __NR_name_to_handle_at
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_name_to_handle_at");
      errno = ENOSYS;
      return -1;
    case 101:  // __NR_nanosleep
      return syscall(35, arg_1, arg_2);
    case 79:  // __NR_newfstatat
      // follows symlinks
      return RunGuestSyscall___NR_newfstatat(arg_1, arg_2, arg_3, arg_4);
    case 42:  // __NR_nfsservctl
      return syscall(180);
    case 265:  // __NR_open_by_handle_at
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_open_by_handle_at");
      errno = ENOSYS;
      return -1;
    case 428:  // __NR_open_tree
      return syscall(428, arg_1, arg_2, arg_3);
    case 56:  // __NR_openat
      // follows symlinks, open flags value mismatch
      return RunGuestSyscall___NR_openat(arg_1, arg_2, arg_3, arg_4);
    case 437:  // __NR_openat2
      return syscall(437, arg_1, arg_2, arg_3, arg_4);
    case 241:  // __NR_perf_event_open
      return syscall(298, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 92:  // __NR_personality
      return syscall(135, arg_1);
    case 438:  // __NR_pidfd_getfd
      return syscall(438, arg_1, arg_2, arg_3);
    case 434:  // __NR_pidfd_open
      return syscall(434, arg_1, arg_2);
    case 424:  // __NR_pidfd_send_signal
      return syscall(424, arg_1, arg_2, arg_3, arg_4);
    case 59:  // __NR_pipe2
      return syscall(293, arg_1, arg_2);
    case 41:  // __NR_pivot_root
      return syscall(155, arg_1, arg_2);
    case 289:  // __NR_pkey_alloc
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_pkey_alloc");
      errno = ENOSYS;
      return -1;
    case 290:  // __NR_pkey_free
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_pkey_free");
      errno = ENOSYS;
      return -1;
    case 288:  // __NR_pkey_mprotect
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_pkey_mprotect");
      errno = ENOSYS;
      return -1;
    case 73:  // __NR_ppoll
      return syscall(271, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 167:  // __NR_prctl
      // custom syscall
      return RunGuestSyscall___NR_prctl(arg_1, arg_2, arg_3, arg_4, arg_5);
    case 67:  // __NR_pread64
      return syscall(17, arg_1, arg_2, arg_3, arg_4);
    case 69:  // __NR_preadv
      return syscall(295, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 286:  // __NR_preadv2
      return syscall(327, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6);
    case 261:  // __NR_prlimit64
      return syscall(302, arg_1, arg_2, arg_3, arg_4);
    case 440:  // __NR_process_madvise
      return syscall(440, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 448:  // __NR_process_mrelease
      return syscall(448, arg_1, arg_2);
    case 270:  // __NR_process_vm_readv
      return syscall(310, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6);
    case 271:  // __NR_process_vm_writev
      return syscall(311, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6);
    case 72:  // __NR_pselect6
      return syscall(270, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6);
    case 117:  // __NR_ptrace
      // custom syscall
      return RunGuestSyscall___NR_ptrace(arg_1, arg_2, arg_3, arg_4);
    case 68:  // __NR_pwrite64
      return syscall(18, arg_1, arg_2, arg_3, arg_4);
    case 70:  // __NR_pwritev
      return syscall(296, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 287:  // __NR_pwritev2
      return syscall(328, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6);
    case 60:  // __NR_quotactl
      return syscall(179, arg_1, arg_2, arg_3, arg_4);
    case 443:  // __NR_quotactl_fd
      return syscall(443, arg_1, arg_2, arg_3, arg_4);
    case 63:  // __NR_read
      return syscall(0, arg_1, arg_2, arg_3);
    case 213:  // __NR_readahead
      return syscall(187, arg_1, arg_2, arg_3);
    case 78:  // __NR_readlinkat
      // follows symlinks
      return RunGuestSyscall___NR_readlinkat(arg_1, arg_2, arg_3, arg_4);
    case 65:  // __NR_readv
      return syscall(19, arg_1, arg_2, arg_3);
    case 142:  // __NR_reboot
      return syscall(169, arg_1, arg_2, arg_3, arg_4);
    case 207:  // __NR_recvfrom
      return syscall(45, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6);
    case 243:  // __NR_recvmmsg
      return syscall(299, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 212:  // __NR_recvmsg
      return syscall(47, arg_1, arg_2, arg_3);
    case 234:  // __NR_remap_file_pages
      return syscall(216, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 14:  // __NR_removexattr
      return syscall(197, arg_1, arg_2);
    case 38:  // __NR_renameat
      return syscall(264, arg_1, arg_2, arg_3, arg_4);
    case 276:  // __NR_renameat2
      return syscall(316, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 218:  // __NR_request_key
      return syscall(249, arg_1, arg_2, arg_3, arg_4);
    case 128:  // __NR_restart_syscall
      return syscall(219);
    case 293:  // __NR_rseq
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_rseq");
      errno = ENOSYS;
      return -1;
    case 134:  // __NR_rt_sigaction
      // changes signal action
      return RunGuestSyscall___NR_rt_sigaction(arg_1, arg_2, arg_3, arg_4);
    case 136:  // __NR_rt_sigpending
      return syscall(127, arg_1, arg_2);
    case 135:  // __NR_rt_sigprocmask
      return syscall(14, arg_1, arg_2, arg_3, arg_4);
    case 138:  // __NR_rt_sigqueueinfo
      return syscall(129, arg_1, arg_2, arg_3);
    case 139:  // __NR_rt_sigreturn
      // should never be called from guest
      return RunGuestSyscall___NR_rt_sigreturn(arg_1);
    case 133:  // __NR_rt_sigsuspend
      return syscall(130, arg_1, arg_2);
    case 137:  // __NR_rt_sigtimedwait
      return syscall(128, arg_1, arg_2, arg_3, arg_4);
    case 240:  // __NR_rt_tgsigqueueinfo
      return syscall(297, arg_1, arg_2, arg_3, arg_4);
    case 125:  // __NR_sched_get_priority_max
      return syscall(146, arg_1);
    case 126:  // __NR_sched_get_priority_min
      return syscall(147, arg_1);
    case 123:  // __NR_sched_getaffinity
      return syscall(204, arg_1, arg_2, arg_3);
    case 275:  // __NR_sched_getattr
      return syscall(315, arg_1, arg_2, arg_3, arg_4);
    case 121:  // __NR_sched_getparam
      return syscall(143, arg_1, arg_2);
    case 120:  // __NR_sched_getscheduler
      return syscall(145, arg_1);
    case 127:  // __NR_sched_rr_get_interval
      return syscall(148, arg_1, arg_2);
    case 122:  // __NR_sched_setaffinity
      return syscall(203, arg_1, arg_2, arg_3);
    case 274:  // __NR_sched_setattr
      return syscall(314, arg_1, arg_2, arg_3);
    case 118:  // __NR_sched_setparam
      return syscall(142, arg_1, arg_2);
    case 119:  // __NR_sched_setscheduler
      return syscall(144, arg_1, arg_2, arg_3);
    case 124:  // __NR_sched_yield
      return syscall(24);
    case 277:  // __NR_seccomp
      return syscall(317, arg_1, arg_2, arg_3);
    case 191:  // __NR_semctl
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_semctl");
      errno = ENOSYS;
      return -1;
    case 190:  // __NR_semget
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_semget");
      errno = ENOSYS;
      return -1;
    case 193:  // __NR_semop
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_semop");
      errno = ENOSYS;
      return -1;
    case 192:  // __NR_semtimedop
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_semtimedop");
      errno = ENOSYS;
      return -1;
    case 71:  // __NR_sendfile
      return syscall(40, arg_1, arg_2, arg_3, arg_4);
    case 269:  // __NR_sendmmsg
      return syscall(307, arg_1, arg_2, arg_3, arg_4);
    case 211:  // __NR_sendmsg
      return syscall(46, arg_1, arg_2, arg_3);
    case 206:  // __NR_sendto
      return syscall(44, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6);
    case 237:  // __NR_set_mempolicy
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_set_mempolicy");
      errno = ENOSYS;
      return -1;
    case 450:  // __NR_set_mempolicy_home_node
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_set_mempolicy_home_node");
      errno = ENOSYS;
      return -1;
    case 99:  // __NR_set_robust_list
      return syscall(273, arg_1, arg_2);
    case 96:  // __NR_set_tid_address
      return syscall(218, arg_1);
    case 162:  // __NR_setdomainname
      return syscall(171, arg_1, arg_2);
    case 152:  // __NR_setfsgid
      return syscall(123, arg_1);
    case 151:  // __NR_setfsuid
      return syscall(122, arg_1);
    case 144:  // __NR_setgid
      return syscall(106, arg_1);
    case 159:  // __NR_setgroups
      return syscall(116, arg_1, arg_2);
    case 161:  // __NR_sethostname
      return syscall(170, arg_1, arg_2);
    case 103:  // __NR_setitimer
      return syscall(38, arg_1, arg_2, arg_3);
    case 268:  // __NR_setns
      return syscall(308, arg_1, arg_2);
    case 154:  // __NR_setpgid
      return syscall(109, arg_1, arg_2);
    case 140:  // __NR_setpriority
      return syscall(141, arg_1, arg_2, arg_3);
    case 143:  // __NR_setregid
      return syscall(114, arg_1, arg_2);
    case 149:  // __NR_setresgid
      return syscall(119, arg_1, arg_2, arg_3);
    case 147:  // __NR_setresuid
      return syscall(117, arg_1, arg_2, arg_3);
    case 145:  // __NR_setreuid
      return syscall(113, arg_1, arg_2);
    case 164:  // __NR_setrlimit
      return syscall(160, arg_1, arg_2);
    case 157:  // __NR_setsid
      return syscall(112);
    case 208:  // __NR_setsockopt
      return syscall(54, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 170:  // __NR_settimeofday
      return syscall(164, arg_1, arg_2);
    case 146:  // __NR_setuid
      return syscall(105, arg_1);
    case 5:  // __NR_setxattr
      return syscall(188, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 196:  // __NR_shmat
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_shmat");
      errno = ENOSYS;
      return -1;
    case 195:  // __NR_shmctl
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_shmctl");
      errno = ENOSYS;
      return -1;
    case 197:  // __NR_shmdt
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_shmdt");
      errno = ENOSYS;
      return -1;
    case 194:  // __NR_shmget
      // missing prototype
      KAPI_TRACE("unsupported syscall __NR_shmget");
      errno = ENOSYS;
      return -1;
    case 210:  // __NR_shutdown
      return syscall(48, arg_1, arg_2);
    case 132:  // __NR_sigaltstack
      // changes signal stack
      return RunGuestSyscall___NR_sigaltstack(arg_1, arg_2);
    case 74:  // __NR_signalfd4
      return syscall(289, arg_1, arg_2, arg_3, arg_4);
    case 198:  // __NR_socket
      return syscall(41, arg_1, arg_2, arg_3);
    case 199:  // __NR_socketpair
      return syscall(53, arg_1, arg_2, arg_3, arg_4);
    case 76:  // __NR_splice
      return syscall(275, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6);
    case 43:  // __NR_statfs
      return syscall(137, arg_1, arg_2);
    case 291:  // __NR_statx
      // follows symlinks
      return RunGuestSyscall___NR_statx(arg_1, arg_2, arg_3, arg_4, arg_5);
    case 225:  // __NR_swapoff
      return syscall(168, arg_1);
    case 224:  // __NR_swapon
      return syscall(167, arg_1, arg_2);
    case 36:  // __NR_symlinkat
      return syscall(266, arg_1, arg_2, arg_3);
    case 81:  // __NR_sync
      return syscall(162);
    case 84:  // __NR_sync_file_range
      return syscall(277, arg_1, arg_2, arg_3, arg_4);
    case 267:  // __NR_syncfs
      return syscall(306, arg_1);
    case 179:  // __NR_sysinfo
      return syscall(99, arg_1);
    case 116:  // __NR_syslog
      return syscall(103, arg_1, arg_2, arg_3);
    case 77:  // __NR_tee
      return syscall(276, arg_1, arg_2, arg_3, arg_4);
    case 131:  // __NR_tgkill
      return syscall(234, arg_1, arg_2, arg_3);
    case 107:  // __NR_timer_create
      // incompatible prototype
      return RunGuestSyscall___NR_timer_create(arg_1, arg_2, arg_3);
    case 111:  // __NR_timer_delete
      return syscall(226, arg_1);
    case 109:  // __NR_timer_getoverrun
      return syscall(225, arg_1);
    case 108:  // __NR_timer_gettime
      return syscall(224, arg_1, arg_2);
    case 110:  // __NR_timer_settime
      return syscall(223, arg_1, arg_2, arg_3, arg_4);
    case 85:  // __NR_timerfd_create
      return syscall(283, arg_1, arg_2);
    case 87:  // __NR_timerfd_gettime
      return syscall(287, arg_1, arg_2);
    case 86:  // __NR_timerfd_settime
      return syscall(286, arg_1, arg_2, arg_3, arg_4);
    case 153:  // __NR_times
      return syscall(100, arg_1);
    case 130:  // __NR_tkill
      return syscall(200, arg_1, arg_2);
    case 45:  // __NR_truncate
      return syscall(76, arg_1, arg_2);
    case 166:  // __NR_umask
      return syscall(95, arg_1);
    case 39:  // __NR_umount2
      return syscall(166, arg_1, arg_2);
    case 160:  // __NR_uname
      return syscall(63, arg_1);
    case 35:  // __NR_unlinkat
      return syscall(263, arg_1, arg_2, arg_3);
    case 97:  // __NR_unshare
      return syscall(272, arg_1);
    case 282:  // __NR_userfaultfd
      return syscall(323, arg_1);
    case 88:  // __NR_utimensat
      return syscall(280, arg_1, arg_2, arg_3, arg_4);
    case 58:  // __NR_vhangup
      return syscall(153);
    case 75:  // __NR_vmsplice
      return syscall(278, arg_1, arg_2, arg_3, arg_4);
    case 260:  // __NR_wait4
      return syscall(61, arg_1, arg_2, arg_3, arg_4);
    case 95:  // __NR_waitid
      return syscall(247, arg_1, arg_2, arg_3, arg_4, arg_5);
    case 64:  // __NR_write
      return syscall(1, arg_1, arg_2, arg_3);
    case 66:  // __NR_writev
      return syscall(20, arg_1, arg_2, arg_3);
    default:
      return RunUnknownGuestSyscall(guest_nr, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6);
  }
}
